import cx_Oracle
from timeit import default_timer as timer
import readfile
import sys

cx_Oracle.init_oracle_client(lib_dir=r"C:\Users\Pichau\Documents\Oracle\oracle\instantclient_18_5")

class OracleDB:
    def __init__(self, user, password, dsn):
        try:
            self.conn = cx_Oracle.connect(
                user=user,
                password=password,
                dsn=dsn
            )
            print("Successfully connected to Oracle Database")
        except cx_Oracle.DatabaseError as e:
            error, = e.args
            if error.code == 1017:
                print('Please check your credentials.')
            else:
                print('Database connection error: %s'.format(e))

    def query(self, query):
        cursor = self.conn.cursor()
        try:
            cursor.execute(query)
        except cx_Oracle.DatabaseError as e:
            error, = e.args
            print(query)
            if error.code == 955:
                print('Table already exists')
            if error.code == 1031:
                print("Insufficient privileges - are you sure you're using the owner account?")
            print(error.code)
            print(error.message)
            print(error.context)
        cursor.close()
        self.conn.commit()
    

    def query_with(self, query, values):
        cursor = self.conn.cursor()
        try:
            cursor.execute(query, values)
        except cx_Oracle.DatabaseError as e:
            error, = e.args
            print(query)
            if error.code == 955:
                print('Table already exists')
            if error.code == 1031:
                print(
                    "Insufficient privileges - are you sure you're using the owner account?")
            print(error.code)
            print(error.message)
            print(error.context)
        cursor.close()
        self.conn.commit()


    def __del__(self):
        self.conn.close()




def main():
    db = OracleDB(user="luan",
                   password="0000",
                   dsn="localhost:1522/XE")

    db.query("""DROP TABLE ClienteDetalhe PURGE""")

    db.query("""DROP TABLE Cliente PURGE""")

    db.query("""CREATE TABLE Cliente (
                    IdCliente INT NOT NULL,
                    Nome varchar(255),
                    Sexo varchar(255),
                    Endereco varchar(255),
                    Cidade varchar(255),
                    UF varchar(255),
                    PRIMARY KEY(IdCliente)
                )""")

    db.query("""CREATE TABLE ClienteDetalhe (
                    IdCliente INT NOT NULL,
                    DataNasc DATE,
                    LimiteAprovado FLOAT,
                    ClienteDesde DATE,
                    ValorAcumulado FLOAT
                )""")
    
    db.query("""ALTER TABLE ClienteDetalhe
                ADD CONSTRAINT ClienteDetalhe_fk 
                    FOREIGN KEY (IdCliente)
                    REFERENCES Cliente(IdCliente)""")
    
    db.query("""DROP TABLE ClienteProduto PURGE""")

    db.query("""CREATE TABLE ClienteProduto (
                    IdCliente INT,
                    IdProduto INT,
                    Qtde INT,
                    Valor FLOAT
                )""")

    db.query("""DROP TABLE Produto PURGE""")

    db.query("""CREATE TABLE Produto (
                    IdProduto NUMBER GENERATED BY DEFAULT AS IDENTITY,
                    Nome VARCHAR(255),
                    Sigla VARCHAR(255),
                    Tipo VARCHAR(255),
                    Descricao VARCHAR(255),
                    Valor FLOAT,
                    PRIMARY KEY(IdProduto)
                )""")

    number = int(sys.argv[1])
    words = readfile.read_n("names.txt", number)


    # Insert in database STRINGS test
    sql = ('INSERT INTO Cliente(IdCliente, Nome, Sexo, Endereco, Cidade, UF) '
           'values(:IdCliente, :Nome, :Sexo, :Endereco, :Cidade, :UF)')
    t0 = timer()
    id = 0
    for i in words:
        db.query_with(sql, [id, i, "M/F", "Lugar", "OutroLugar", "OL"])
        id += 1
    t1 = timer()
    print("Insert STRINGS: " + str(t1 - t0))

    # Insert in database NUMBER test
    sql = ('INSERT INTO ClienteProduto(IdCliente, IdProduto, Qtde, Valor) '
           'values(:IdCliente, :IdProduto, :Qtde, :Valor)')
    t0 = timer()
    id = 0
    for i in words:
        db.query_with(sql, [id, id, 1, 10.50])
        id += 1
    t1 = timer()
    print("Insert NUMBER: " + str(t1 - t0))

    # Update in database STRINGS test
    sql = ('UPDATE Cliente '
           'SET Nome = :Nome ')
    t0 = timer()
    db.query_with(sql, ["Juanito"])
    t1 = timer()
    print("Update STRINGS: " + str(t1 - t0))

    # Update in database NUMBER test
    sql = ('UPDATE ClienteProduto '
           'SET Qtde = :Qtde ')
    t0 = timer()
    db.query_with(sql, [2])
    t1 = timer()
    print("Update NUMBER: " + str(t1 - t0))

    # Delete in database STRINGS test
    sql = ('DELETE FROM Cliente')
    t0 = timer()
    db.query(sql)
    t1 = timer()
    print("Delete STRINGS: " + str(t1 - t0))

    # Delete in database NUMBER test
    sql = ('DELETE FROM ClienteProduto')
    t0 = timer()
    db.query(sql)
    t1 = timer()
    print("Delete NUMBER: " + str(t1 - t0))

    
    del db

if(__name__ == "__main__"):
    main()

